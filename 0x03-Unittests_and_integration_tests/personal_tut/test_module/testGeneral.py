from parameterized import parameterized, param, parameterized_class
import math

import unittest
from learn.sampleFuncs import Widget


class WidgetTestCase(unittest.TestCase):
    def setUp(self):
        self.widget = Widget('The widget')

    def test_default_widget_size(self):
        self.assertEqual(self.widget.size(), (40, 40), 'incorrect size')

    def test_widget_resize(self):
        new = self.widget.resize()
        self.assertEqual(new, (40, 90),
                         'wrong size after resize')

    def tearDown(self):
        del self.widget

# Learning parameterization of testings through usage examples


class paramTests(unittest.TestCase):
    # A list of tuples
    @parameterized.expand([
        (2, 3, 5),
        (3, 5, 8),
    ])
    def test_add(self, a, b, result):
        self.assertEqual(a+b, result)

    # list of params
    @parameterized.expand([
        param("10", 10),
        param("10", 16, base=16),
    ])
    def test_int(self, str_val, expected, base=10):
        self.assertEqual(int(str_val, base=base), expected)

    # # An iterable of params
    # @parameterized.expand(
    #     param.explicit(*json.loads(line))
    #     for line in open("testcases.jsons")
    # )
    # def test_from_json_file(...):
    # ...

    # A callable which returns a list of tuples

# tasks a dictionary. this is a key-value pair


# The `@parameterized_class` decorator accepts a `class_name_func`
#  argument, which controls the name of the parameterized classes
# generated by `@parameterized_class:`


def get_class_name(cls, num, params_dict):
    # By default the generated class named includes either the "name"
    # parameter (if present), or the first string value. This example shows
    # multiple parameters being included in the generated class name:
    return "%s_%s_%s%s" % (
        cls.__name__,
        num,
        parameterized.to_safe_name(params_dict['a']),
        parameterized.to_safe_name(params_dict['b']),
    )


@parameterized_class(('a', 'b', 'result'), [
    (4, 2, 16),
    (5, 3, 125),
])
class paramMathTest(unittest.TestCase):
    def test_pow(self):
        self.assertEqual((math.pow(self.a, self.b)), self.result)

# rewritten class above as a list of dictionaries


@parameterized_class([
    {'a': 4, 'b': 2, 'result': 16},
    {'a': 5, 'b': 3, 'result': 125},
], class_name_func=get_class_name)
class paramMathTest2(unittest.TestCase):
    def test_pow(self):
        """ Test power. """
        self.assertEqual((math.pow(self.a, self.b)), self.result)


@parameterized_class([
    {"a": "hello", "b": " world!", "expected": "hello world!"},
    {"a": "say", "b": " cheese :)", "expected": "say cheese :)"},
], class_name_func=get_class_name)
class TestConcatenation(unittest.TestCase):
    def test_concat(self):
        self.assertEqual(self.a + self.b, self.expected)


if __name__ == '__main__':
    unittest.main()
